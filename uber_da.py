# -*- coding: utf-8 -*-
"""uber_da.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15ULl6WSmjCLbSyNTV69cjepkz8Z7HmK0
"""

import numpy as np
import pandas as pd
import warnings
warnings.filterwarnings('ignore')

df=pd.read_csv("/content/ncr_ride_bookings.csv")

df.head()

df["Booking Status"].value_counts()

df.info()

df.isnull().sum()

numerical_cols=[col for col in df.columns if df[col].dtype !="object"]
numerical_cols

import seaborn as sns
sns.heatmap(df[numerical_cols].corr())

from sklearn.impute import SimpleImputer
imp_mean = SimpleImputer(missing_values=np.nan, strategy='mean')

target_columns = [
    'Avg VTAT',
    'Avg CTAT',
    'Booking Value',
    'Ride Distance',
    'Driver Ratings',
    'Customer Rating'
]

df[target_columns] = imp_mean.fit_transform(df[target_columns])

df.isnull().sum()

df["Cancelled Rides by Customer"]=df["Cancelled Rides by Customer"].replace(np.nan,0)

df

df["Cancelled Rides by Customer"].value_counts()

df['Cancelled Rides by Driver']=df['Cancelled Rides by Driver'].replace(np.nan,0)

df["Cancelled Rides by Driver"].value_counts()

df['Incomplete Rides']=df["Cancelled Rides by Driver"].replace(np.nan,0)
df["Cancelled Rides by Driver"].value_counts()

from sklearn.impute import SimpleImputer
imp_cat = SimpleImputer(strategy='most_frequent')
# fit_transform returns 2D array, so flattening it using [:, 0]
df["Payment Method"] = imp_cat.fit_transform(df[["Payment Method"]])[:, 0]

df

df.isnull().sum()

df["Reason for cancelling by Customer"].value_counts()
df['Reason for cancelling by Customer'].fillna('Unknown', inplace=True)
df["Driver Cancellation Reason"].value_counts()
df["Driver Cancellation Reason"].fillna('Unknown', inplace=True)
df["Incomplete Rides Reason"].value_counts()
df['Incomplete Rides Reason'].fillna('Unknown', inplace=True)

df.isnull().sum()

print("stastics:",df.describe())

df.info()

# If Date and Time are separate columns
df['Date'] = pd.to_datetime(df['Date'], format='%Y-%m-%d')
df['Time'] = pd.to_datetime(df['Time'], format='%H:%M:%S').dt.time

# Combine Date and Time into a single datetime column (optional)
df['DateTime'] = pd.to_datetime(df['Date'].astype(str) + ' ' + df['Time'].astype(str))

df

df["Booking Status"].unique()

df["Booking Status"] = df["Booking Status"].map({
                                                    'No Driver Found' : 0,
                                                    'Incomplete':1,
                                                    'Completed':2,
                                                    'Cancelled by Driver':3,
                                                    'Cancelled by Customer':4
                                                })

df

df['Vehicle Type'].value_counts()

df['Vehicle Type'].unique()
df['Vehicle Type']=df['Vehicle Type'].map({"Auto":0,"Go Mini":1,"Go Sedan":2,"Bike":3,"Premier Sedan":4,"eBike":5,"Uber XL":6})

df

df['Payment Method'].value_counts()

df['Payment Method'].unique()
df['Payment Method']=df['Payment Method'].map({'UPI':0,"Cash":1,"Uber Wallet":2,"Credit Card":3,"Debit Card":4})
df

df["Reason for cancelling by Customer"].value_counts()

df['Reason for cancelling by Customer'].unique()

df["Reason for cancelling by Customer"] = df["Reason for cancelling by Customer"].map({
                                                    'Unknown' : 0,
                                                    'Driver is not moving towards pickup location':1,
                                                    'AC is not working':2,
                                                    'Change of plans':3,
                                                    'Wrong Address':4,
                                                })

df['Driver Cancellation Reason'].unique()

df["Driver Cancellation Reason"] = df["Driver Cancellation Reason"].map({
                                                    'Unknown' : 0,
                                                    'Personal & Car related issues':1,
                                                    'Customer related issue':2,
                                                    'More than permitted people in there':3,
                                                    'The customer was coughing/sick':4,
                                                })

df['Driver Cancellation Reason'].value_counts()

df

df['Incomplete Rides Reason'].unique()


df['Incomplete Rides Reason'] = df['Incomplete Rides Reason'].map({
                                                    'Unknown' : 0,
                                                    'Vehicle Breakdown':1,
                                                    'Customer Demand':2,
                                                })

df

df.info()

df.head(3)

